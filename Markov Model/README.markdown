# Music Generation with Markov Model

This project implements a music generation system using a simple Markov Model (MM) to create monophonic musical sequences based on MIDI files. The application is written in Python and uses the `music21` library to process MIDI data and generate new melodies. The input is a single MIDI file, which is analyzed to build a transition matrix for note sequences, and a new melody is generated based on these probabilities.

## Project Overview

The goal of this project is to generate a simple melody using a first-order Markov Model. The system:

- Loads a MIDI file and checks for overlapping notes to ensure it is monophonic.
- Extracts note pitches and their timing information.
- Builds a transition matrix based on the probability of moving from one note to another.
- Generates a new melody by sampling from the transition matrix.
- Exports the generated melody as a MIDI file.

This project is designed to work best with monophonic MIDI files (containing a single melody line without overlapping notes).

## Prerequisites

To run this project, you need:

- **Python 3.x** installed.
- A basic understanding of Python programming.
- Familiarity with Markov Models is helpful but not required.
- A monophonic MIDI file to use as input.

### Required Python Packages

Install the necessary Python packages using pip:

```bash
pip install music21 numpy
```

## Setup Instructions

1. **Prepare a MIDI File**: Obtain a monophonic MIDI file (e.g., a simple melody). Ensure the file is accessible on your system or in your working directory.

2. **Update the Script**: In the Python script (`Markov_Model.py`), update the `midi_file_path` variable in the `main` function to point to the exact path of your MIDI file. For example:

   ```python
   midi_file_path = 'path/to/your/midi/file.mid'
   ```

3. **Run the Script**: Execute the script in a Python environment (e.g., locally or in Google Colab):

   ```bash
   python Markov_Model.py
   ```

   The script will:
   - Load and analyze the MIDI file for monophonic properties.
   - Extract note sequences and build a transition matrix.
   - Generate a new melody of 15 notes.
   - Save the result as a MIDI file named `mm_generated_melody.mid`.

## Project Structure

- `markov_music_generation.py`: The main Python script containing the music generation code.
- `README.md`: This file, providing an overview and instructions for the project.
- Input MIDI file (user-provided): A monophonic MIDI file used as input.
- `mm_generated_melody.mid`: The output MIDI file generated by the script.

## How It Works

The script is divided into several key functions:

1. **Checking for Overlapping Notes** (`check_overlapping_notes`):
   - Loads the MIDI file using `music21`.
   - Extracts note start and end times to detect overlaps (indicating polyphony).
   - Warns if the file is polyphonic, as the model is optimized for monophonic input.

2. **Parsing MIDI to Notes** (`parse_midi_to_notes`):
   - Extracts note pitches from the MIDI file, ignoring timing for simplicity.

3. **Building the Transition Matrix** (`build_transition_matrix`):
   - Creates a matrix of transition probabilities between unique notes based on their sequence in the input file.
   - Normalizes probabilities so each row sums to 1.

4. **Generating a Melody** (`generate_melody`):
   - Uses the transition matrix to generate a new sequence of notes.
   - Starts with a random note or the first note from the input file.
   - Samples the next note based on transition probabilities.

5. **Saving to MIDI** (`save_melody_to_midi`):
   - Converts the generated note sequence into a `music21` stream.
   - Assigns a default quarter-note duration to each note.
   - Exports the stream as a MIDI file.

## Running Experiments

To experiment with different outputs:

1. Use a different monophonic MIDI file as input by updating `midi_file_path`.
2. Adjust the `length` parameter in the `generate_melody` call (e.g., `length=20`) to generate a longer or shorter melody.
3. Change the `start_note` parameter in `generate_melody` to begin with a specific note (must be present in the input file).
4. Modify the `quarterLength` in `save_melody_to_midi` to change note durations (currently set to 1 quarter note).

## Expected Output

The generated MIDI file (`mm_generated_melody.mid`) contains a simple monophonic melody based on the note transitions learned from the input file. The melody may sound repetitive or random depending on the input data and the transition matrix. The output can be played using any MIDI-compatible software (e.g., VLC Media Player) or imported into a DAW for further editing.

## Limitations

- The model assumes monophonic input; polyphonic files (with overlapping notes) may produce suboptimal results.
- Note durations are fixed at one quarter note in the output, ignoring the original timing.
- The first-order Markov Model is simplistic and may not capture complex musical patterns.
- The quality of the generated melody depends heavily on the input MIDI file's structure and variety.
